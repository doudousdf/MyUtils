1.*************如何对 Android 应用进行性能分析***************************

android 性能主要之响应速度 和UI刷新速度。
可以参考博客：Android系统性能调优工具介绍
首先从函数的耗时来说，有一个工具TraceView 这是androidsdk自带的工作，用于测量函数耗时的。
UI布局的分析，可以有2块，一块就是Hierarchy Viewer 可以看到View的布局层次，以及每个View刷新加载的时间。
这样可以很快定位到那块layout & View 耗时最长。
还有就是通过自定义View来减少view的层次。

2.**********************什么情况下会导致内存泄露***********************

    什么时候会发生内存泄露？内存泄露的根本原因：长生命周期的对象持有短生命周期的对象。短周期对象就无法及时释放。
    Android 的虚拟机是基于寄存器的Dalvik，它的最大堆大小一般是16M，有的机器为24M。因此我们所能利用的内存空间是有限的。
如果我们的内存占用超过了一定的水平就会出现OutOfMemory 的错误。
    内存溢出的几点原因：
    1. 资源释放问题
        程序代码的问题，长期保持某些资源，如Context、Cursor、IO 流的引用，资源得不到释放造成内存泄露。
    2. 对象内存过大问题
        保存了多个耗用内存过大的对象（如Bitmap、XML 文件），造成内存超出限制。
    3. static 关键字的使用问题
        static 是Java 中的一个关键字，当用它来修饰成员变量时，那么该变量就属于该类，而不是该类的实例。
        所以用static 修饰的变量，它的生命周期是很长的，如果用它来引用一些资源耗费过多的实例（Context 的情况最多）
        ，这时就要谨慎对待了。
        针对static 的解决方案：
            1) 应该尽量避免static 成员变量引用资源耗费过多的实例，比如Context。
            2) Context 尽量使用ApplicationContext，因为Application 的Context 的生命周期比较长， 引用它不会出现内存泄露的问题。
            ( 实际上是因为ApplicationContext 对象程序运行就会创建, 程序退出才销毁, 它有且仅有一个
            , 所以就算不用他也在那里, 不存在回收的问题.)
            3) 使用WeakReference 代替强引用。比如可以使用WeakReference<Context> mContextRef;
    4. 线程导致内存溢出
    ############################################################
        public class MyActivity extends Activity {
            @Override
            public void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                setContentView(R.layout.main);
                new MyThread().start();
            }
            private class MyThread extends Thread{
                @Override
                public void run() {
                    super.run();
                    //do somthing while(true)
                }
            }
        }
    这段代码很平常也很简单，是我们经常使用的形式。
    我们思考一个问题：假设MyThread的run 函数是一个很费时的操作，当我们开启该线程后，将设备的横屏变为了竖屏，
    一般情况下当屏幕转换时会重新创建Activity，按照我们的想法，老的Activity 应该会被销毁才对，然而事实上并非如此。
    由于我们的线程是Activity 的内部类，所以MyThread 中保存了Activity 的一个引用，当MyThread 的run 函数没有结束时
    ，MyThread 是不会被销毁的，因此它所引用的老的Activity 也不会被销毁，因此就出现了内存泄露的问题。

    解决方法：
        使用volatile变量来设置Thread的run的循环条件，保证变量同步性
        public class JavaTest extends Thread{
            private volatile boolean isRun = true;
            public static void main(String[] args) {
                JavaTest thread = new JavaTest();
                thread.start();
                thread.close();
            }
            @Override
            public void run() {
                while (isRun) {
                    //dosomething
                }
            }
            public void close() {
                this.isRun = false;
            }
        }
    ############################################################
    针对这种线程导致的内存泄露问题的解决方案：
        （一） 将线程的内部类，改为静态内部类（因为非静态内部类拥有外部类对象的强引用，而静态类则不拥有）。
        （二） 在线程内部采用弱引用保存Context 引用。

    使用cursor 要关闭,
    使用database 要关闭,
    使用流要关闭,
    使用Timer 必须calcel,
    使用TimerTask 必须cancel,
    注册内容观察者必须取消注册
    内容观察者被添加到ContentQueryMap 后不用时delete 这个内容观察者
    Handler 在activity 的onDestory 中removeMessageAndCallback(null)

4.********************Android 中如何捕获未捕获的异常***************************
关键是实现Thread.UncaughtExceptionHandler
然后是在application的oncreate里面注册。

5.ANR 是什么？怎样避免和解决 ANR（重要）
ANR->Application Not Responding
也就是在规定的时间内，没有响应。
三种类型：
1）. KeyDispatchTimeout(5 seconds) --主要类型按键或触摸事件在特定时间内无响应
2）. BroadcastTimeout(10 seconds) --BroadcastReceiver在特定时间内无法处理完成
3）. ServiceTimeout(20 seconds) --小概率类型 Service在特定的时间内无法处理完成
为什么会超时：事件没有机会处理 & 事件处理超时
怎么避免ANR
ANR的关键
是处理超时，所以应该避免在UI线程，BroadcastReceiver 还有service主线程中，处理复杂的逻辑和计算
而交给work thread操作。
1）避免在activity里面做耗时操作，oncreate & onresume
2）避免在onReceiver里面做过多操作
3）避免在Intent Receiver里启动一个Activity，因为它会创建一个新的画面，并从当前用户正在运行的程序上抢夺焦点。
4）尽量使用handler来处理UI thread & workthread的交互。
6.Android 线程间通信有哪几种方式
1）共享变量（内存）
2）管道：（管道是进程间通信中最古老的方式，它包括 无名管道 和 有名管道两种，前者用于父进程和子进程间的通信，后者用于运行于同一台机器上的任意两个进程间的通信。 无名管道由pipe()函数创建。）
3）handle机制
runOnUiThread(Runnable)
view.post(Runnable)
7.Devik 进程，linux 进程，线程的区别
Dalvik进程。
每一个android app都会独立占用一个dvm虚拟机，运行在linux系统中。
所以dalvik进程和linux进程是可以理解为一个概念。
8.描述一下 android 的系统架构
从小到上就是：
linux kernel,lib dalvik vm ,application framework, app
9.android 应用对内存是如何限制的?我们应该如何合理使用内存？
activitymanager.getMemoryClass()  获取内存限制。
关于合理使用内存，其实就是避免OOM & 内存泄露中已经说明。
10. 简述 android 应用程序结构是哪些
1）main code
2) unit test
3）mianifest
4）res->drawable,drawable-xxhdpi,layout,value,mipmap
mipmap 是一种很早就有的技术了，翻译过来就是纹理映射技术.
google建议只把启动图片放入。
5）lib
6）color
11.请解释下 Android 程序运行时权限与文件系统权限的区别
文件的系统权限是由linux系统规定的，只读，读写等。
运行时权限，是对于某个系统上的app的访问权限，允许，拒绝，询问。该功能可以防止非法的程序访问敏感的信息。
12.Framework 工作方式及原理，Activity 是如何生成一个 view 的，机制是什么
Framework是android 系统对 linux kernel，lib库等封装，提供WMS，AMS，bind机制，handler-message机制等方式，供app使用。
简单来说framework就是提供app生存的环境。
1）Activity在attch方法的时候，会创建一个phonewindow（window的子类）
2）onCreate中的setContentView方法，会创建DecorView
3）DecorView 的addview方法，会把layout中的布局加载进来。
13.多线程间通信和多进程之间通信有什么不同，分别怎么实现
线程间的通信可以参考第6点。
进程间的通信：
bind机制（IPC->AIDL)
linux级共享内存
boradcast
Activity之间可以通过intent来传递数据
14.Android 屏幕适配
屏幕适配的方式：xxxdpi， wrap_content,match_parent. 获取屏幕大小，做处理。
dp来适配屏幕，sp来确定字体大小
drawable-xxdpi, values-1280*1920等 这些就是资源的适配。
wrap_content,match_parent, 这些是view的自适应
weight，这是权重的适配。
